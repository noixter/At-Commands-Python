#!/urs/bin/env python3

import serial
import time
# para enviar el Ctrl-Z
from curses import ascii

#modulo.open()


def reading():
    global modulo
    datos = ''
    while modulo.inWaiting() > 0:
        datos += modulo.readline().decode()
    return datos

def setup_module():
    modulo = serial.Serial('/dev/ttyUSB2')
    if modulo.isOpen():
        print ('Serial port Available')
        return modulo
    else:
        return print ('Serial port not Available')

def write_command(command):
    global modulo
    try:
        if command == 'GET':
            net_command()
       

        commando = ('{}'.format(command) + '\r\n').encode()
        modulo.write(commando)
        print ('Command Write...')
    except ValueError:
        print ('Something goes wront')

def net_command():
    command = capture_command()
    if command != 'ctrl+z':
        commando = ('{}'.format(command) + '\r\n').encode()
        modulo.write(commando)
    else:
        modulo.write(('\r\n').enconde())
        modulo.write(('\r\n').enconde())
        modulo.write(ascii.ctrl('z'))



def capture_command():
    global modulo
    print ('Write the AT Command you want! ')
    command = input('>>> ')
    command.upper()
    return command

def closing_port():
    global modulo
    print ('Closing Port, Thank You')
    modulo.close()
    if modulo.isOpen():
        modulo.close()
    else:
        pass

def _welcome():
    print ('WELCOME SERIAL AT COMMAND SIM5360E COMMUNICATOR')
    print ('*' * 50)
    print ('Let\'s Begin')
    print ('Write \'EXIT\' for go out')

if __name__=='__main__':
   _welcome()
   modulo = setup_module()
   exit = True
   while exit is True :
       info = capture_command()
       if info != 'EXIT':
       	  write_command(info)
          time.sleep(1)
          read = reading()
          print(read)
       else:
           closing_port()
           exit = False
